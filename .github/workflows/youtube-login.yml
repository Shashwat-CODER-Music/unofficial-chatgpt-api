name: Refresh YouTube Cookies (browsercookie)
on:
  schedule:
    - cron: '0 */5 * * *' # every 5 hours
  workflow_dispatch:

jobs:
  refresh-cookies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install Python dependencies
        run: |
          pip install browsercookie3 requests
          
      - name: Install Chrome browser
        run: |
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
      - name: Create browsercookie refresh script
        run: |
          cat << 'EOF' > refresh-cookies.py
          import browsercookie3 as browsercookie
          import time
          import requests
          import os
          from datetime import datetime
          
          OUTPUT_COOKIES_PATH = './cookies1.txt'
          UPLOAD_URL = "https://file2link-tm3r.onrender.com/upload"
          
          def generate_fresh_cookies():
              """Generate fresh cookies using browsercookie"""
              try:
                  print("Loading cookies from Chrome browser...")
                  # Load cookies from Chrome
                  cj = browsercookie.chrome()
                  
                  # Filter for YouTube and Google domains
                  youtube_domains = ['youtube.com', 'google.com', 'accounts.google.com']
                  youtube_cookies = []
                  
                  for cookie in cj:
                      if any(domain in cookie.domain for domain in youtube_domains):
                          youtube_cookies.append(cookie)
                  
                  print(f"Found {len(youtube_cookies)} YouTube/Google cookies")
                  return youtube_cookies
                  
              except Exception as e:
                  print(f"Error loading cookies from Chrome: {e}")
                  print("Attempting to use existing cookies as fallback...")
                  return []
          
          def write_cookies_netscape_format(cookies, filename):
              """Write cookies to Netscape format file"""
              with open(filename, "w") as f:
                  f.write("# Netscape HTTP Cookie File\n")
                  f.write("# This is a generated file! Do not edit.\n\n")
                  
                  for cookie in cookies:
                      # Handle domain formatting
                      domain = cookie.domain
                      if not domain.startswith('.') and '.' in domain:
                          domain = '.' + domain
                      
                      # Handle expiration
                      expires = int(cookie.expires) if cookie.expires else int(time.time()) + 86400  # 24 hours default
                      
                      f.write(
                          "{}\t{}\t{}\t{}\t{}\t{}\t{}\n".format(
                              domain,
                              "TRUE" if domain.startswith('.') else "FALSE",
                              cookie.path if cookie.path else "/",
                              "TRUE" if cookie.secure else "FALSE",
                              expires,
                              cookie.name,
                              cookie.value
                          )
                      )
              
              print(f"✅ {filename} generated successfully with {len(cookies)} cookies!")
          
          def upload_cookies_file(filename):
              """Upload cookies file to the specified URL"""
              if not os.path.exists(filename):
                  print(f"❌ {filename} not found. Skipping upload.")
                  return False
              
              try:
                  with open(filename, "rb") as f:
                      files = {'file': f}
                      print(f"Uploading {filename}...")
                      response = requests.post(UPLOAD_URL, files=files, timeout=30)
                      response.raise_for_status()
                  
                  upload_result = response.json()
                  
                  if upload_result.get("success"):
                      print("🎉 File uploaded successfully!")
                      print("Access URL:", upload_result.get("access_url"))
                      return True
                  else:
                      print("❌ File upload failed.")
                      print("Error:", upload_result.get("error", "Unknown error"))
                      return False
                      
              except FileNotFoundError:
                  print(f"❌ {filename} not found. Make sure the file was generated.")
                  return False
              except requests.exceptions.RequestException as e:
                  print(f"❌ Upload request error: {e}")
                  return False
              except Exception as e:
                  print(f"❌ Unexpected error during upload: {e}")
                  return False
          
          def fallback_to_existing_cookies():
              """Use existing cookies.txt as fallback if browser extraction fails"""
              input_file = './cookies.txt'
              if os.path.exists(input_file):
                  print("Using existing cookies.txt as fallback...")
                  
                  with open(input_file, 'r') as f:
                      content = f.read()
                  
                  # Parse existing cookies and update timestamps
                  lines = content.split('\n')
                  updated_lines = []
                  current_time = int(time.time())
                  
                  for line in lines:
                      if line.startswith('#') or not line.strip():
                          updated_lines.append(line)
                      else:
                          parts = line.split('\t')
                          if len(parts) >= 7:
                              # Update expiration time to extend cookie life
                              parts[4] = str(current_time + 86400)  # Add 24 hours
                              updated_lines.append('\t'.join(parts))
                          else:
                              updated_lines.append(line)
                  
                  with open(OUTPUT_COOKIES_PATH, 'w') as f:
                      f.write('\n'.join(updated_lines))
                  
                  print(f"✅ Fallback cookies saved to {OUTPUT_COOKIES_PATH}")
                  return True
              
              return False
          
          def main():
              print(f"Starting cookie refresh process at {datetime.now()}")
              
              # Try to generate fresh cookies from browser
              fresh_cookies = generate_fresh_cookies()
              
              if fresh_cookies:
                  # Write fresh cookies to file
                  write_cookies_netscape_format(fresh_cookies, OUTPUT_COOKIES_PATH)
                  
                  # Also create a backup with current timestamp
                  backup_filename = f"cookies_backup_{int(time.time())}.txt"
                  write_cookies_netscape_format(fresh_cookies, backup_filename)
                  print(f"Backup saved as {backup_filename}")
                  
              else:
                  # Fallback to existing cookies with updated timestamps
                  if not fallback_to_existing_cookies():
                      print("❌ No cookies available and no fallback possible")
                      exit(1)
              
              # Upload the cookies file
              print("\n" + "="*50)
              upload_success = upload_cookies_file(OUTPUT_COOKIES_PATH)
              
              if upload_success:
                  print("\n🎉 Cookie refresh and upload completed successfully!")
              else:
                  print("\n⚠️ Cookie refresh completed but upload failed")
              
              print(f"Process completed at {datetime.now()}")
          
          if __name__ == '__main__':
              main()
          EOF
          
      - name: Run browsercookie refresh script
        run: |
          # Set display for Chrome in headless environment
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          python refresh-cookies.py
        
      - name: Commit updated cookies1.txt if changed
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add cookies1.txt
          # Also add any backup files created
          git add cookies_backup_*.txt 2>/dev/null || true
          if ! git diff --cached --quiet; then
            git commit -m "Refresh cookies1.txt on $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            git push
          else
            echo "No changes in cookies1.txt to commit."
          fi
