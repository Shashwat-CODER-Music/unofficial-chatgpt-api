name: Refresh YouTube Cookies

on:
  schedule:
    - cron: '0 */5 * * *' # every 5 hours
  workflow_dispatch:

jobs:
  refresh-cookies:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install puppeteer-extra puppeteer-extra-plugin-stealth puppeteer

      - name: Create refresh-cookies.js script
        run: |
          cat << 'EOF' > refresh-cookies.js
          const puppeteer = require('puppeteer-extra');
          const StealthPlugin = require('puppeteer-extra-plugin-stealth');
          const fs = require('fs');
          const path = require('path');

          puppeteer.use(StealthPlugin());

          const INPUT_COOKIES_PATH = path.resolve('./cookies.txt');
          const OUTPUT_COOKIES_PATH = path.resolve('./cookies1.txt');

          function parseCookiesTxt(content) {
            const lines = content.split('\n').filter(line => line && !line.startsWith('#'));
            return lines.map(line => {
              const [domain, flag, path, secure, expiration, name, value] = line.split('\t');
              return {
                domain,
                name,
                value,
                path,
                secure: secure.toLowerCase() === 'true' || secure === '1',
                expires: Number(expiration),
                httpOnly: false,
                sameSite: 'Lax',
              };
            });
          }

          function serializeCookies(cookies) {
            return cookies.map(cookie => {
              return [
                cookie.domain.startsWith('.') ? cookie.domain : '.' + cookie.domain,
                'TRUE',
                cookie.path,
                cookie.secure ? 'TRUE' : 'FALSE',
                cookie.expires ? cookie.expires : 0,
                cookie.name,
                cookie.value,
              ].join('\t');
            }).join('\n');
          }

          (async () => {
            if (!fs.existsSync(INPUT_COOKIES_PATH)) {
              console.error('Input cookies.txt file not found!');
              process.exit(1);
            }

            const browser = await puppeteer.launch({
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox'],
            });

            const page = await browser.newPage();

            const txt = fs.readFileSync(INPUT_COOKIES_PATH, 'utf-8');
            const cookies = parseCookiesTxt(txt);
            await page.setCookie(...cookies);
            console.log(`Loaded ${cookies.length} cookies from cookies.txt`);

            await page.goto('https://www.youtube.com', { waitUntil: 'networkidle2' });
            console.log('Visited YouTube');

            await new Promise(resolve => setTimeout(resolve, 10000));

            const updatedCookies = await page.cookies();

            const serialized = serializeCookies(updatedCookies);
            fs.writeFileSync(OUTPUT_COOKIES_PATH, serialized, 'utf-8');
            console.log(`Saved updated cookies to ${OUTPUT_COOKIES_PATH}`);

            await browser.close();
          })();
          EOF

      - name: Run Puppeteer cookie refresh script
        run: node ./refresh-cookies.js

      - name: Commit updated cookies1.txt if changed
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add cookies1.txt
          if ! git diff --cached --quiet; then
            git commit -m "Refresh cookies1.txt on $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            git push
          else
            echo "No changes in cookies1.txt to commit."
          fi
